img {
  max-width: 100%;
  vertical-align: middle;
}

@keyframes move {
  from {
    background-position: 2px 19px;
  }

  to {
    background-position: 500px 19px;
  }
}

.input-control {
  width: 100%;
  display: block;
  padding: $input-padding-y $input-padding-x;
  color: $input-color;
  border: $input-border-width solid $input-border-color;
  background-color: $input-bg;
  background-clip: padding-box;
  font-family: $input-font-family;
  font-weight: $input-font-weight;
  line-height: $input-line-height;
  @include font-size($input-font-size);

  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
  @include border-radius($input-border-radius, 0);

  @include box-shadow($input-box-shadow);
  @include transition($input-transition);

  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus($ignore-warning: true);

  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    border: 0;
    background-color: transparent;
  }

  // Remove select outline from select box in FF
  &:-moz-focusring {
    color: transparent;
    text-shadow: 0 0 0 $input-color;
  }

  // Placeholder
  &::placeholder {
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 1;
    color: $input-placeholder-color;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled,
  &[readonly] {
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
    background-color: $input-disabled-bg;
  }
}

.form-field {
  .input-control__control {
    width: 100%;
    max-width: 100%;
    height: $input-height;
    cursor: pointer;
    border: $input-border-width solid $input-border-color;
    background-color: $input-bg;

    @include media-breakpoint-up("md") {
      width: rem(350);
    }

    // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
    @include border-radius($input-border-radius, 0);

    @include box-shadow($input-box-shadow);
    @include transition($input-transition);

    &:hover {
      border-color: $input-border-color;
    }

    &[class*=is-focused] {
      color: $input-focus-color;
      border-color: $input-focus-border-color;
      outline: 0;
      background-color: $input-focus-bg;

      @if $enable-shadows {
        @include box-shadow($input-box-shadow, $input-focus-box-shadow);
      }

      @else {
        // Avoid using mixin so we can pass custom focus shadow properly
        box-shadow: $input-focus-box-shadow;
      }
    }

    .input-control__value-container {
      padding: $input-padding-y $input-padding-x;
      color: $input-color;
      line-height: 1;

      &:focus {
        outline: 0;
      }

      .input-control__single-value {
        position: static;
        top: auto;
        margin: 0;
        transform: none;
        color: $input-color;
        font-family: $input-font-family;
        font-weight: $input-font-weight;
        line-height: $input-line-height;
        @include font-size($input-font-size);

        &+div {
          margin: 0;
          padding-top: 0;
          padding-bottom: 0;
        }
      }
    }

    &+.input-control__menu {
      .input-control__option {
        font-size: em(14);
      }
    }
  }
}

.btn {
  @include get-btn();
}

// Future-proof disabling of clicks on `<a>` elements
a.btn.disabled,
fieldset:disabled a.btn {
  pointer-events: none;
}

@each $color,
$value in $theme-colors {
  .btn-#{$color} {
    @include button-variant($value, $value);
  }
}

.btn-light {
  border-color: $gray-200;
}

.error {
  margin: 0 0 rem(15);
  padding: rem(10) rem(15);
  color: $white;
  border-radius: $border-radius;
  background: $red;
  @include font-size(14px);
}